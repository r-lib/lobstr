[{"path":"https://lobstr.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 lobstr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lobstr.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. . Copyright holder.","code":""},{"path":"https://lobstr.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H (2022). lobstr: Visualize R Data Structures Trees. https://lobstr.r-lib.org/, https://github.com/r-lib/lobstr.","code":"@Manual{,   title = {lobstr: Visualize R Data Structures with Trees},   author = {Hadley Wickham},   year = {2022},   note = {https://lobstr.r-lib.org/, https://github.com/r-lib/lobstr}, }"},{"path":"https://lobstr.r-lib.org/dev/index.html","id":"lobstr-","dir":"","previous_headings":"","what":"Visualize R Data Structures with Trees","title":"Visualize R Data Structures with Trees","text":"lobstr provides tools vein str(), allow dig detail object.","code":""},{"path":"https://lobstr.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualize R Data Structures with Trees","text":"Install released version lobstr CRAN: can install development version :","code":"install.packages(\"lobstr\") # install.packages(\"devtools\") devtools::install_github(\"r-lib/lobstr\")"},{"path":[]},{"path":"https://lobstr.r-lib.org/dev/index.html","id":"abstract-syntax-trees","dir":"","previous_headings":"Example","what":"Abstract syntax trees","title":"Visualize R Data Structures with Trees","text":"ast() draws abstract syntax tree R expressions:","code":"ast(a + b + c) #> █─`+`  #> ├─█─`+`  #> │ ├─a  #> │ └─b  #> └─c  ast(function(x = 1) {   if (x > 0) print(\"Hi!\") }) #> █─`function`  #> ├─█─x = 1  #> ├─█─`{`  #> │ └─█─`if`  #> │   ├─█─`>`  #> │   │ ├─x  #> │   │ └─0  #> │   └─█─print  #> │     └─\"Hi!\"  #> └─<inline srcref>"},{"path":"https://lobstr.r-lib.org/dev/index.html","id":"references","dir":"","previous_headings":"Example","what":"References","title":"Visualize R Data Structures with Trees","text":"ref() shows hows objects can shared across data structures digging underlying __ref__erences: related tool obj_size(), computes size object taking shared references account:","code":"x <- 1:1e6 y <- list(x, x, x) ref(y) #> █ [1:0x7fed114eaea8] <list>  #> ├─[2:0x7fed21f373b8] <int>  #> ├─[2:0x7fed21f373b8]  #> └─[2:0x7fed21f373b8]  e <- rlang::env() e$self <- e ref(e) #> █ [1:0x7fecf1856f00] <env>  #> └─self = [1:0x7fecf1856f00] obj_size(x) #> 680 B obj_size(y) #> 760 B"},{"path":"https://lobstr.r-lib.org/dev/index.html","id":"call-stack-trees","dir":"","previous_headings":"Example","what":"Call stack trees","title":"Visualize R Data Structures with Trees","text":"cst() shows frames call stack connected:","code":"f <- function(x) g(x) g <- function(x) h(x) h <- function(x) x f(cst()) #>     ▆ #>  1. ├─global f(cst()) #>  2. │ └─global g(x) #>  3. │   └─global h(x) #>  4. └─lobstr::cst()"},{"path":"https://lobstr.r-lib.org/dev/reference/ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the abstract syntax tree — ast","title":"Display the abstract syntax tree — ast","text":"useful alternative str() expression objects.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the abstract syntax tree — ast","text":"","code":"ast(x)"},{"path":"https://lobstr.r-lib.org/dev/reference/ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the abstract syntax tree — ast","text":"x expression display. Input automatically quoted, use !! unquote already captured expression object.","code":""},{"path":[]},{"path":"https://lobstr.r-lib.org/dev/reference/ast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the abstract syntax tree — ast","text":"","code":"# Leaves ast(1) #> 1  ast(x) #> x   # Simple calls ast(f()) #> █─f  ast(f(x, 1, g(), h(i()))) #> █─f  #> ├─x  #> ├─1  #> ├─█─g  #> └─█─h  #>   └─█─i  ast(f()()) #> █─█─f  ast(f(x)(y)) #> █─█─f  #> │ └─x  #> └─y   ast((x + 1)) #> █─`(`  #> └─█─`+`  #>   ├─x  #>   └─1   # Displaying expression already stored in object x <- quote(a + b + c) ast(x) #> x  ast(!!x) #> █─`+`  #> ├─█─`+`  #> │ ├─a  #> │ └─b  #> └─c   # All operations have this same structure ast(if (TRUE) 3 else 4) #> █─`if`  #> ├─TRUE  #> ├─3  #> └─4  ast(y <- x * 10) #> █─`<-`  #> ├─y  #> └─█─`*`  #>   ├─x  #>   └─10  ast(function(x = 1, y = 2) { x + y } ) #> █─`function`  #> ├─█─x = 1  #> │ └─y = 2  #> ├─█─`{`  #> │ └─█─`+`  #> │   ├─x  #> │   └─y  #> └─<inline srcref>   # Operator precedence ast(1 * 2 + 3) #> █─`+`  #> ├─█─`*`  #> │ ├─1  #> │ └─2  #> └─3  ast(!1 + !1) #> █─`!`  #> └─█─`+`  #>   ├─1  #>   └─█─`!`  #>     └─1"},{"path":"https://lobstr.r-lib.org/dev/reference/cst.html","id":null,"dir":"Reference","previous_headings":"","what":"Call stack tree — cst","title":"Call stack tree — cst","text":"Shows relationship calls stack. function combines results sys.calls() sys.parents() yielding display shows frames call stack related.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/cst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call stack tree — cst","text":"","code":"cst()"},{"path":"https://lobstr.r-lib.org/dev/reference/cst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call stack tree — cst","text":"","code":"# If all evaluation is eager, you get a single tree f <- function() g() g <- function() h() h <- function() cst() f() #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─pkgdown .f(.x[[i]], ...) #>   7.             ├─base::withCallingHandlers(...) #>   8.             └─pkgdown:::data_reference_topic(...) #>   9.               └─pkgdown:::run_examples(...) #>  10.                 └─pkgdown:::highlight_examples(code, topic, env = env) #>  11.                   └─downlit::evaluate_and_highlight(...) #>  12.                     └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  13.                       └─evaluate:::evaluate_call(...) #>  14.                         ├─evaluate timing_fn(...) #>  15.                         ├─evaluate handle(...) #>  16.                         │ └─base::try(f, silent = TRUE) #>  17.                         │   └─base::tryCatch(...) #>  18.                         │     └─base tryCatchList(expr, classes, parentenv, handlers) #>  19.                         │       └─base tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  20.                         │         └─base doTryCatch(return(expr), name, parentenv, handler) #>  21.                         ├─base::withCallingHandlers(...) #>  22.                         ├─base::withVisible(...) #>  23.                         └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  24.                           └─base::eval(expr, envir, enclos) #>  25.                             └─base::eval(expr, envir, enclos) #>  26.                               └─f() #>  27.                                 └─g() #>  28.                                   └─h() #>  29.                                     └─lobstr::cst()  # You get multiple trees with delayed evaluation try(f()) #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─pkgdown .f(.x[[i]], ...) #>   7.             ├─base::withCallingHandlers(...) #>   8.             └─pkgdown:::data_reference_topic(...) #>   9.               └─pkgdown:::run_examples(...) #>  10.                 └─pkgdown:::highlight_examples(code, topic, env = env) #>  11.                   └─downlit::evaluate_and_highlight(...) #>  12.                     └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  13.                       └─evaluate:::evaluate_call(...) #>  14.                         ├─evaluate timing_fn(...) #>  15.                         ├─evaluate handle(...) #>  16.                         │ └─base::try(f, silent = TRUE) #>  17.                         │   └─base::tryCatch(...) #>  18.                         │     └─base tryCatchList(expr, classes, parentenv, handlers) #>  19.                         │       └─base tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  20.                         │         └─base doTryCatch(return(expr), name, parentenv, handler) #>  21.                         ├─base::withCallingHandlers(...) #>  22.                         ├─base::withVisible(...) #>  23.                         └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  24.                           └─base::eval(expr, envir, enclos) #>  25.                             └─base::eval(expr, envir, enclos) #>  26.                               ├─base::try(f()) #>  27.                               │ └─base::tryCatch(...) #>  28.                               │   └─base tryCatchList(expr, classes, parentenv, handlers) #>  29.                               │     └─base tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  30.                               │       └─base doTryCatch(return(expr), name, parentenv, handler) #>  31.                               └─f() #>  32.                                 └─g() #>  33.                                   └─h() #>  34.                                     └─lobstr::cst()  # Pay attention to the first element of each subtree: each # evaluates the outermost call f <- function(x) g(x) g <- function(x) h(x) h <- function(x) x try(f(cst())) #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─pkgdown .f(.x[[i]], ...) #>   7.             ├─base::withCallingHandlers(...) #>   8.             └─pkgdown:::data_reference_topic(...) #>   9.               └─pkgdown:::run_examples(...) #>  10.                 └─pkgdown:::highlight_examples(code, topic, env = env) #>  11.                   └─downlit::evaluate_and_highlight(...) #>  12.                     └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  13.                       └─evaluate:::evaluate_call(...) #>  14.                         ├─evaluate timing_fn(...) #>  15.                         ├─evaluate handle(...) #>  16.                         │ └─base::try(f, silent = TRUE) #>  17.                         │   └─base::tryCatch(...) #>  18.                         │     └─base tryCatchList(expr, classes, parentenv, handlers) #>  19.                         │       └─base tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  20.                         │         └─base doTryCatch(return(expr), name, parentenv, handler) #>  21.                         ├─base::withCallingHandlers(...) #>  22.                         ├─base::withVisible(...) #>  23.                         └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  24.                           └─base::eval(expr, envir, enclos) #>  25.                             └─base::eval(expr, envir, enclos) #>  26.                               ├─base::try(f(cst())) #>  27.                               │ └─base::tryCatch(...) #>  28.                               │   └─base tryCatchList(expr, classes, parentenv, handlers) #>  29.                               │     └─base tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  30.                               │       └─base doTryCatch(return(expr), name, parentenv, handler) #>  31.                               ├─f(cst()) #>  32.                               │ └─g(x) #>  33.                               │   └─h(x) #>  34.                               └─lobstr::cst()  # With a little ingenuity you can use it to see how NSE # functions work in base R with(mtcars, {cst(); invisible()}) #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─pkgdown .f(.x[[i]], ...) #>   7.             ├─base::withCallingHandlers(...) #>   8.             └─pkgdown:::data_reference_topic(...) #>   9.               └─pkgdown:::run_examples(...) #>  10.                 └─pkgdown:::highlight_examples(code, topic, env = env) #>  11.                   └─downlit::evaluate_and_highlight(...) #>  12.                     └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  13.                       └─evaluate:::evaluate_call(...) #>  14.                         ├─evaluate timing_fn(...) #>  15.                         ├─evaluate handle(...) #>  16.                         │ └─base::try(f, silent = TRUE) #>  17.                         │   └─base::tryCatch(...) #>  18.                         │     └─base tryCatchList(expr, classes, parentenv, handlers) #>  19.                         │       └─base tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  20.                         │         └─base doTryCatch(return(expr), name, parentenv, handler) #>  21.                         ├─base::withCallingHandlers(...) #>  22.                         ├─base::withVisible(...) #>  23.                         └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  24.                           └─base::eval(expr, envir, enclos) #>  25.                             └─base::eval(expr, envir, enclos) #>  26.                               ├─base::with(...) #>  27.                               └─base::with.default(...) #>  28.                                 └─base::eval(substitute(expr), data, enclos = parent.frame()) #>  29.                                   └─base::eval(substitute(expr), data, enclos = parent.frame()) #>  30.                                     └─lobstr::cst() invisible(subset(mtcars, {cst(); cyl == 0})) #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─pkgdown .f(.x[[i]], ...) #>   7.             ├─base::withCallingHandlers(...) #>   8.             └─pkgdown:::data_reference_topic(...) #>   9.               └─pkgdown:::run_examples(...) #>  10.                 └─pkgdown:::highlight_examples(code, topic, env = env) #>  11.                   └─downlit::evaluate_and_highlight(...) #>  12.                     └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  13.                       └─evaluate:::evaluate_call(...) #>  14.                         ├─evaluate timing_fn(...) #>  15.                         ├─evaluate handle(...) #>  16.                         │ └─base::try(f, silent = TRUE) #>  17.                         │   └─base::tryCatch(...) #>  18.                         │     └─base tryCatchList(expr, classes, parentenv, handlers) #>  19.                         │       └─base tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  20.                         │         └─base doTryCatch(return(expr), name, parentenv, handler) #>  21.                         ├─base::withCallingHandlers(...) #>  22.                         ├─base::withVisible(...) #>  23.                         └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  24.                           └─base::eval(expr, envir, enclos) #>  25.                             └─base::eval(expr, envir, enclos) #>  26.                               ├─base::subset(...) #>  27.                               └─base::subset.data.frame(...) #>  28.                                 └─base::eval(e, x, parent.frame()) #>  29.                                   └─base::eval(e, x, parent.frame()) #>  30.                                     └─lobstr::cst()  # You can also get unusual trees by evaluating in frames # higher up the call stack f <- function() g() g <- function() h() h <- function() eval(quote(cst()), parent.frame(2)) f() #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─pkgdown .f(.x[[i]], ...) #>   7.             ├─base::withCallingHandlers(...) #>   8.             └─pkgdown:::data_reference_topic(...) #>   9.               └─pkgdown:::run_examples(...) #>  10.                 └─pkgdown:::highlight_examples(code, topic, env = env) #>  11.                   └─downlit::evaluate_and_highlight(...) #>  12.                     └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  13.                       └─evaluate:::evaluate_call(...) #>  14.                         ├─evaluate timing_fn(...) #>  15.                         ├─evaluate handle(...) #>  16.                         │ └─base::try(f, silent = TRUE) #>  17.                         │   └─base::tryCatch(...) #>  18.                         │     └─base tryCatchList(expr, classes, parentenv, handlers) #>  19.                         │       └─base tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  20.                         │         └─base doTryCatch(return(expr), name, parentenv, handler) #>  21.                         ├─base::withCallingHandlers(...) #>  22.                         ├─base::withVisible(...) #>  23.                         └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  24.                           └─base::eval(expr, envir, enclos) #>  25.                             └─base::eval(expr, envir, enclos) #>  26.                               └─f() #>  27.                                 ├─g() #>  28.                                 │ └─h() #>  29.                                 │   └─base::eval(quote(cst()), parent.frame(2)) #>  30.                                 │     └─base::eval(quote(cst()), parent.frame(2)) #>  31.                                 └─lobstr::cst()"},{"path":"https://lobstr.r-lib.org/dev/reference/mem_used.html","id":null,"dir":"Reference","previous_headings":"","what":"How much memory is currently used by R? — mem_used","title":"How much memory is currently used by R? — mem_used","text":"mem_used() wraps around gc() returns exact number bytes currently used R. Note changes match exactly obj_size() session specific state (e.g. .Last.value) adds minor variations.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/mem_used.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"How much memory is currently used by R? — mem_used","text":"","code":"mem_used()"},{"path":"https://lobstr.r-lib.org/dev/reference/mem_used.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"How much memory is currently used by R? — mem_used","text":"","code":"prev_m <- 0; m <- mem_used(); m - prev_m #> 61.36 MB  x <- 1:1e6 prev_m <- m; m <- mem_used(); m - prev_m #> 86.32 kB obj_size(x) #> 680 B  rm(x) prev_m <- m; m <- mem_used(); m - prev_m #> 46.67 kB  prev_m <- m; m <- mem_used(); m - prev_m #> 464 B"},{"path":"https://lobstr.r-lib.org/dev/reference/obj_addr.html","id":null,"dir":"Reference","previous_headings":"","what":"Find memory location of objects and their children. — obj_addr","title":"Find memory location of objects and their children. — obj_addr","text":"obj_addr() gives address value x points ; obj_addrs() gives address components list, environment, character vector x point .","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/obj_addr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find memory location of objects and their children. — obj_addr","text":"","code":"obj_addr(x)  obj_addrs(x)"},{"path":"https://lobstr.r-lib.org/dev/reference/obj_addr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find memory location of objects and their children. — obj_addr","text":"x object","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/obj_addr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find memory location of objects and their children. — obj_addr","text":"obj_addr() written away avoids taking references object.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/obj_addr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find memory location of objects and their children. — obj_addr","text":"","code":"# R creates copies lazily x <- 1:10 y <- x obj_addr(x) == obj_addr(y) #> [1] TRUE  y[1] <- 2L obj_addr(x) == obj_addr(y) #> [1] FALSE  y <- runif(10) obj_addr(y) #> [1] \"0x55769697fb68\" z <- list(y, y) obj_addrs(z) #> [1] \"0x55769697fb68\" \"0x55769697fb68\"  y[2] <- 1.0 obj_addrs(z) #> [1] \"0x55769697fb68\" \"0x55769697fb68\" obj_addr(y) #> [1] \"0x557696980b38\"  # The address of an object is different every time you create it: obj_addr(1:10) #> [1] \"0x557697ed50f8\" obj_addr(1:10) #> [1] \"0x557697f3c290\" obj_addr(1:10) #> [1] \"0x557697fa1508\""},{"path":"https://lobstr.r-lib.org/dev/reference/obj_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the size of an object. — obj_size","title":"Calculate the size of an object. — obj_size","text":"obj_size() computes size object set objects; obj_sizes() breaks individual contribution multiple objects total size.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/obj_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the size of an object. — obj_size","text":"","code":"obj_size(..., env = parent.frame())  obj_sizes(..., env = parent.frame())"},{"path":"https://lobstr.r-lib.org/dev/reference/obj_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the size of an object. — obj_size","text":"... Set objects compute size. env Environment terminate search. defaults current environment include size objects already stored elsewhere. Regardless value , obj_size() never looks past global base environments.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/obj_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the size of an object. — obj_size","text":"estimate size object, bytes.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/obj_size.html","id":"compared-to-object-size-","dir":"Reference","previous_headings":"","what":"Compared to object.size()","title":"Calculate the size of an object. — obj_size","text":"Compared object.size(), obj_size(): Accounts types shared values, just strings global string pool. Includes size environments (env) Accurately measures size ALTREP objects.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/obj_size.html","id":"environments","dir":"Reference","previous_headings":"","what":"Environments","title":"Calculate the size of an object. — obj_size","text":"obj_size() attempts take account size environments associated object. particularly important closures formulas, since otherwise may realise accidentally captured large object. However, easy count: want include size every object every environment leading back emptyenv(). obj_size() takes heuristic approach: never counts size global environment, base environment, empty environment, namespace. Additionally, env argument allows specify another environment stop. defaults environment obj_size() called prevent double-counting objects created elsewhere.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/obj_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the size of an object. — obj_size","text":"","code":"# obj_size correctly accounts for shared references x <- runif(1e4) obj_size(x) #> 80.05 kB  z <- list(a = x, b = x, c = x) obj_size(z) #> 80.49 kB  # this means that object size is not transitive obj_size(x) #> 80.05 kB obj_size(z) #> 80.49 kB obj_size(x, z) #> 80.49 kB  # use obj_size() to see the unique contribution of each component obj_sizes(x, z) #> * 80.05 kB #> *    440 B obj_sizes(z, x) #> * 80.49 kB #> *      0 B obj_sizes(!!!z) #> a: 80.05 kB #> b:      0 B #> c:      0 B  # obj_size() also includes the size of environments f <- function() {   x <- 1:1e4   a ~ b } obj_size(f()) #> 1.52 kB  #' # In R 3.5 and greater, `:` creates a special \"ALTREP\" object that only # stores the first and last elements. This will make some vectors much # smaller than you'd otherwise expect obj_size(1:1e6) #> 680 B"},{"path":"https://lobstr.r-lib.org/dev/reference/ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Display tree of references — ref","title":"Display tree of references — ref","text":"tree display focusses distinction names values. reference-type object (lists, environments, optional character vectors), displays location component. display shows connection shared references using locally unique id.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display tree of references — ref","text":"","code":"ref(..., character = FALSE)"},{"path":"https://lobstr.r-lib.org/dev/reference/ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display tree of references — ref","text":"... One objects character TRUE, show references character vector global string pool","code":""},{"path":[]},{"path":"https://lobstr.r-lib.org/dev/reference/ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display tree of references — ref","text":"","code":"x <- 1:100 ref(x) #> [1:0x557694b818b0] <int>   y <- list(x, x, x) ref(y) #> █ [1:0x5576967048b8] <list>  #> ├─[2:0x557694b818b0] <int>  #> ├─[2:0x557694b818b0]  #> └─[2:0x557694b818b0]  ref(x, y) #> [1:0x557694b818b0] <int>  #>   #> █ [2:0x5576967048b8] <list>  #> ├─[1:0x557694b818b0]  #> ├─[1:0x557694b818b0]  #> └─[1:0x557694b818b0]   e <- new.env() e$e <- e e$x <- x e$y <- list(x, e) ref(e) #> █ [1:0x55769445d2d8] <env>  #> ├─x = [2:0x557694b818b0] <int>  #> ├─y = █ [3:0x55769673cf18] <list>  #> │     ├─[2:0x557694b818b0]  #> │     └─[1:0x55769445d2d8]  #> └─e = [1:0x55769445d2d8]   # Can also show references to global string pool if requested ref(c(\"x\", \"x\", \"y\")) #> [1:0x5576966750e8] <chr>  ref(c(\"x\", \"x\", \"y\"), character = TRUE) #> █ [1:0x5576965e7258] <chr>  #> ├─[2:0x557690c1c670] <string: \"x\">  #> ├─[2:0x557690c1c670]  #> └─[3:0x557690d14ce0] <string: \"y\">"},{"path":"https://lobstr.r-lib.org/dev/reference/sxp.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect an object — sxp","title":"Inspect an object — sxp","text":"sxp(x) similar .Internal(inspect(x)), recursing C data structures underlying R object. main difference output little compact, recurses fully, avoids getting stuck infinite loops using depth-first search. also returns list can compute , carefully uses colour highlight important details.","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/sxp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect an object — sxp","text":"","code":"sxp(x, expand = character(), max_depth = 5L)"},{"path":"https://lobstr.r-lib.org/dev/reference/sxp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect an object — sxp","text":"x Object inspect expand Optionally, expand components true usually suppressed. Use: \"character\" show underlying entries global string pool. \"environment\" show underlying hashtables. \"altrep\" show underlying data. \"call\" show full AST (ast() usually superior) \"bytecode\" show generated bytecode. max_depth Maximum depth recurse. Use max_depth = Inf (care!) recurse deeply possible. Skipped elements shown ....`","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/sxp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inspect an object — sxp","text":"name sxp comes SEXP, name C data structure underlies R objects.","code":""},{"path":[]},{"path":"https://lobstr.r-lib.org/dev/reference/sxp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect an object — sxp","text":"","code":"x <- list(   TRUE,   1L,   runif(100),   \"3\" ) sxp(x) #> [1:0x55769665b7e8] <VECSXP[4]> (named:4) #>   [2:0x557695bdd300] <LGLSXP[1]> (named:3) #>   [3:0x557695bdd338] <INTSXP[1]> (named:3) #>   [4:0x5576962a42d0] <REALSXP[100]> (named:1) #>   [5:0x557695bdd3a8] <STRSXP[1]> (named:3)  # Expand \"character\" to see underlying CHARSXP entries in the global # string pool x <- c(\"banana\", \"banana\", \"apple\", \"banana\") sxp(x) #> [1:0x5576966965c8] <STRSXP[4]> (named:4) sxp(x, expand = \"character\") #> [1:0x5576966965c8] <STRSXP[4]> (named:4) #>   [2:0x557695cb2bc0] <CHARSXP> (named:10) #>   [2:0x557695cb2bc0] #>   [3:0x557695cb2c68] <CHARSXP> (named:4) #>   [2:0x557695cb2bc0]  # Expand altrep to see underlying data x <- 1:10 sxp(x) #> [1:0x557691725cb0] <INTSXP[10]> (altrep named:65535) sxp(x, expand = \"altrep\") #> [1:0x557691725cb0] <INTSXP[10]> (altrep named:65535) #>   _class [2:0x557690bd5ea0] <RAWSXP[144]> (named:7163) #>     _attrib [3:0x557690c0c138] <LISTSXP> (named:1) #>       [4:0x557690c0c368] <SYMSXP: compact_intseq> (named:37) #>       [5:0x557690bd7560] <SYMSXP: base> (named:65535) #>       [6:0x557690c0a3d8] <INTSXP[1]> (named:2) #>   _data1 [7:0x55769634bf48] <REALSXP[3]> (named:1) #>   _data2 <NILSXP>  # Expand environmnets to see the underlying implementation details e1 <- new.env(hash = FALSE, parent = emptyenv(), size = 3L) e2 <- new.env(hash = TRUE, parent = emptyenv(), size = 3L) e1$x <- e2$x <- 1:10  sxp(e1) #> [1:0x557695f7c4c0] <ENVSXP> (named:5) #>   x [2:0x557696c744d8] <INTSXP[10]> (altrep named:65535) #>   _enclos [3:0x557690bd8868] <ENVSXP: empty> (named:65535) sxp(e1, expand = \"environment\") #> [1:0x557695f7c4c0] <ENVSXP> (named:6) #>   _frame [2:0x557696c73eb8] <LISTSXP> (named:1) #>     x [3:0x557696c744d8] <INTSXP[10]> (altrep named:65535) #>   _hashtab <NILSXP> #>   _enclos [5:0x557690bd8868] <ENVSXP: empty> (named:65535) sxp(e2, expand = \"environment\") #> [1:0x557695f5c520] <ENVSXP> (named:5) #>   _frame <NILSXP> #>   _hashtab [3:0x55769680a9f8] <VECSXP[3/1]> (named:1) #>     [4:0x557696c741c8] <LISTSXP> (named:1) #>       x [5:0x557696c744d8] <INTSXP[10]> (altrep named:65535) #>     <NILSXP> #>     <NILSXP> #>   _enclos [6:0x557690bd8868] <ENVSXP: empty> (named:65535)"},{"path":"https://lobstr.r-lib.org/dev/reference/tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty tree-like object printing — tree","title":"Pretty tree-like object printing — tree","text":"cleaner easier read replacement str nested list-like objects","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty tree-like object printing — tree","text":"","code":"tree(   x,   ...,   index_unnamed = FALSE,   max_depth = 10L,   max_length = 1000L,   show_environments = TRUE,   hide_scalar_types = TRUE,   val_printer = crayon::blue,   class_printer = crayon::silver,   show_attributes = FALSE,   remove_newlines = TRUE,   tree_chars = box_chars() )"},{"path":"https://lobstr.r-lib.org/dev/reference/tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty tree-like object printing — tree","text":"x tree like object (list, etc.) ... Ignored (used force use names) index_unnamed children containers without names indices used stand-? max_depth far tree structure printed. E.g. 1 means direct children root element shown. Useful deep lists. max_length many elements printed? useful case try print object 100,000 items . show_environments environments treated like normal lists recursed ? hide_scalar_types atomic scalars printed type length like vectors? E.g. x <- \"\" shown x<char [1]>: \"\" instead x: \"\". val_printer Function values get passed drawn screen. Can used color generally style output. class_printer val_printer class types non-atomic tree elements. show_attributes attributes printed child list avoided? remove_newlines character strings newlines newlines removed? mess vertical flow tree may desired use-cases newline structure important understanding object state. tree_chars List box characters used construct tree. Needs elements $h horizontal bar, $hd dotted horizontal bar, $v vertical bar, $vd dotted vertical bar, $l l-bend, $j junction (middle child).","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty tree-like object printing — tree","text":"console output structure","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty tree-like object printing — tree","text":"","code":"x <- list(   list(id = \"a\", val = 2),   list(     id = \"b\",     val = 1,     children = list(       list(id = \"b1\", val = 2.5),       list(         id = \"b2\",         val = 8,         children = list(           list(id = \"b21\", val = 4)         )       )     )   ),   list(     id = \"c\",     val = 8,     children = list(       list(id = \"c1\"),       list(id = \"c2\", val = 1)     )   ) )  # Basic usage tree(x) #> <list> #> ├─<list> #> │ ├─id: \"a\" #> │ └─val: 2 #> ├─<list> #> │ ├─id: \"b\" #> │ ├─val: 1 #> │ └─children: <list> #> │   ├─<list> #> │   │ ├─id: \"b1\" #> │   │ └─val: 2.5 #> │   └─<list> #> │     ├─id: \"b2\" #> │     ├─val: 8 #> │     └─children: <list> #> │       └─<list> #> │         ├─id: \"b21\" #> │         └─val: 4 #> └─<list> #>   ├─id: \"c\" #>   ├─val: 8 #>   └─children: <list> #>     ├─<list> #>     │ └─id: \"c1\" #>     └─<list> #>       ├─id: \"c2\" #>       └─val: 1  # Even cleaner output can be achieved by not printing indices tree(x, index_unnamed = FALSE) #> <list> #> ├─<list> #> │ ├─id: \"a\" #> │ └─val: 2 #> ├─<list> #> │ ├─id: \"b\" #> │ ├─val: 1 #> │ └─children: <list> #> │   ├─<list> #> │   │ ├─id: \"b1\" #> │   │ └─val: 2.5 #> │   └─<list> #> │     ├─id: \"b2\" #> │     ├─val: 8 #> │     └─children: <list> #> │       └─<list> #> │         ├─id: \"b21\" #> │         └─val: 4 #> └─<list> #>   ├─id: \"c\" #>   ├─val: 8 #>   └─children: <list> #>     ├─<list> #>     │ └─id: \"c1\" #>     └─<list> #>       ├─id: \"c2\" #>       └─val: 1  # Limit depth if object is potentially very large tree(x, max_depth = 2) #> <list> #> ├─<list> #> │ ├─id: \"a\" #> │ └─val: 2 #> ├─<list> #> │ ├─id: \"b\" #> │ ├─val: 1 #> │ └─children: <list>... #> └─<list> #>   ├─id: \"c\" #>   ├─val: 8 #>   └─children: <list>...  # You can customize how the values and classes are printed if desired tree(x, val_printer = function(x) {   paste0(\"_\", x, \"_\") }) #> <list> #> ├─<list> #> │ ├─id: _\"a\"_ #> │ └─val: _2_ #> ├─<list> #> │ ├─id: _\"b\"_ #> │ ├─val: _1_ #> │ └─children: <list> #> │   ├─<list> #> │   │ ├─id: _\"b1\"_ #> │   │ └─val: _2.5_ #> │   └─<list> #> │     ├─id: _\"b2\"_ #> │     ├─val: _8_ #> │     └─children: <list> #> │       └─<list> #> │         ├─id: _\"b21\"_ #> │         └─val: _4_ #> └─<list> #>   ├─id: _\"c\"_ #>   ├─val: _8_ #>   └─children: <list> #>     ├─<list> #>     │ └─id: _\"c1\"_ #>     └─<list> #>       ├─id: _\"c2\"_ #>       └─val: _1_"},{"path":"https://lobstr.r-lib.org/dev/reference/tree_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Build element or node label in tree — tree_label","title":"Build element or node label in tree — tree_label","text":"methods control value given node printed. New methods can added support needed novel class","code":""},{"path":"https://lobstr.r-lib.org/dev/reference/tree_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build element or node label in tree — tree_label","text":"","code":"tree_label(x, opts)"},{"path":"https://lobstr.r-lib.org/dev/reference/tree_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build element or node label in tree — tree_label","text":"x tree like object (list, etc.) opts list options directly mirrors named arguments tree. E.g. list(val_printer = crayon::red) equivalent tree(..., val_printer = crayon::red).","code":""},{"path":[]},{"path":"https://lobstr.r-lib.org/dev/news/index.html","id":"lobstr-112","dir":"Changelog","previous_headings":"","what":"lobstr 1.1.2","title":"lobstr 1.1.2","text":"CRAN release: 2022-06-22 Switched cpp11 Rcpp. Relicensed MIT (#51). obj_size() sxp() now support non-nil terminated pairlists. obj_size() now displays large objects KB, MB, etc (#57, #60), longer returns NA objects larger 2^31 bytes (#45). obj_sizes() now computes relative sizes correctly (without meaningless floating point differences). ref() lists contents environments even names beginning . (@krlmlr, #53). New, experimental tree() function alternative str() (#56).","code":""},{"path":"https://lobstr.r-lib.org/dev/news/index.html","id":"lobstr-111","dir":"Changelog","previous_headings":"","what":"lobstr 1.1.1","title":"lobstr 1.1.1","text":"CRAN release: 2019-07-02 Fix PROTECT error. Remove UTF-8 characters comments","code":""},{"path":"https://lobstr.r-lib.org/dev/news/index.html","id":"lobstr-110","dir":"Changelog","previous_headings":"","what":"lobstr 1.1.0","title":"lobstr 1.1.0","text":"CRAN release: 2019-06-19 ref() now handles custom classes properly (@yutannihilation, #36) sxp() new tool displaying underlying C representation object (#38). obj_size() now special cases ALTREP “deferred string vectors” previously crashed due way abuse pairlist type (#35).","code":""},{"path":"https://lobstr.r-lib.org/dev/news/index.html","id":"lobstr-101","dir":"Changelog","previous_headings":"","what":"lobstr 1.0.1","title":"lobstr 1.0.1","text":"CRAN release: 2018-12-21 ast() prints scalar integer complex accurately (#24) obj_addr() longer increments reference count input (#25) obj_size() now correctly computes size ALTREP objects R 3.5.0 (#32)","code":""}]
